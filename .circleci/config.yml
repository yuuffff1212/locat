version: 2.1
orbs:
  ruby: circleci/ruby@0.1.2
  aws-ecr: circleci/aws-ecr@6.15
  aws-ecs: circleci/aws-ecs@2.0.0

jobs:
  build:
    docker:
      - image: circleci/ruby:3.0.1-node-browsers
        environment:
          - BUNDLER_VERSION: 2.2.24
          - RAILS_ENV: 'test'

      - image: circleci/mysql:5.7
        environment:
          - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
          - MYSQL_ROOT_HOST: '127.0.0.1'

    working_directory: ~/locat

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            gem install bundler -v 2.2.24
            bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # database setup
      - run: mv ./config/database.yml.ci ./config/database.yml

      # database setup
      - run:
          name: setup database
          command: |
            bundle exec rake db:create
            bundle exec rake db:schema:load

      # install yarn
      - run:
          name: install yarn
          command: yarn install

      # install webpack
      - run:
          name: install webpack
          command: bundle exec bin/webpack

      #Rubocop
      -run:
         name: Rubocop
         command: bundle exec rubocop

        # run tests
      - run:
          name: run rspec
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"
            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES
      # collect reports
      - store_test_results:
          path: /tmp/test-results

      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

workflows:
  # Nginxのデプロイ
  nginx-deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          #AWS_ECR_ACCOUNT_URL => ${アカウントID}.dkr.ecr.${リージョン}.amazonaws.com
          account-url: AWS_ECR_ACCOUNT_URL
          # リージョン
          region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          # ECRにリポジトリがなかったら創るか？
          create-repo: true
          # Dockerfleのパス(デフォルトはカレントディレクトリのパス)
          dockerfile: ./containers/nginx/Dockerfile
          # ECRのリポジトリ
          repo: nginx-locat-app
          tag: "${CIRCLE_SHA1}"
          filters:
            branches:
              only: master
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          # ECSのタスク定義名
          family: 'locat'
          # ECSのクラスター名かARNのフルパス
          cluster-name: 'locat-cluster'
          # サービス名
          service-name: 'locat-alb-service'
          # containerはタスク定義で設定したコンテナ名にする
          container-image-name-updates: "container=nginx,tag=${CIRCLE_SHA1}"

  # Railsのデプロイ
  rails-deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          # ECRにリポジトリがなかったら創るか？
          create-repo: true
          dockerfile: ./Dockerfile
          # ECRのリポジトリ
          repo: rails-locat-app
          tag: "${CIRCLE_SHA1}"
          filters:
            branches:
              only: master
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          # ECSのタスク定義名
          family: 'locat'
          # ECSのクラスター名かARNのフルパス
          cluster-name: 'locat-cluster'
          # サービス名
          service-name: 'locat-alb-service'
          # containerはタスク定義で設定したコンテナ名にする
          container-image-name-updates: "container=rails,tag=${CIRCLE_SHA1}"